package repositoryset

import (
	"fmt"
	"log"
	"os"

	tea "github.com/charmbracelet/bubbletea"
	"github.com/spf13/cobra"
	"github.com/tidwall/gjson"

	"gh_foundations/internal/pkg/functions"
	githubfoundations "gh_foundations/internal/pkg/types/github_foundations"

	zone "github.com/lrstanley/bubblezone"
)

var terraformerStateFile string

var GenRepositorySetCmd = &cobra.Command{
	Use:   "repository_set",
	Short: "Generates an hcl file that contains a repository set input. Can be run interactively or with a terraformer file input",
	Long:  `Generates an hcl file that contains a repository set input. Can be run interactively or with a terraformer file input using the --terraformer-file flag. If run with a terraformer file it will generate hcl for all repositories in the state file generated by terraformer.`,
	Args: func(cmd *cobra.Command, args []string) error {
		if terraformerStateFile != "" {
			if _, err := os.Stat(terraformerStateFile); err != nil {
				return err
			}
		}
		return nil
	},
	Run: func(cmd *cobra.Command, args []string) {
		zone.NewGlobal()
		repositorySet := new(githubfoundations.RepositorySetInput)
		if terraformerStateFile != "" {
			repositorySet = genFromTerraformerFile()
		} else {
			m := initialModel()
			if _, err := tea.NewProgram(m, tea.WithAltScreen(), tea.WithMouseCellMotion()).Run(); err != nil {
				fmt.Println("Error running program:", err)
				os.Exit(1)
			}
			repositorySet = m.repositorySet
		}

		fmt.Println(repositorySet)

		// file := hclwrite.NewEmptyFile()
		// repositorySet.WriteInputsHCL(file)
		// output, err := os.Create("repository_set.inputs.hcl")
		// if err != nil {
		// 	log.Fatal(err)
		// }
		// file.WriteTo(output)
	},
}

func init() {
	GenRepositorySetCmd.Flags().StringVarP(&terraformerStateFile, "terraformer-file", "f", "", "Terraformer state file to generate repository_set hcl from")
}

func genFromTerraformerFile() *githubfoundations.RepositorySetInput {
	stateBytes, err := os.ReadFile(terraformerStateFile)
	if err != nil {
		log.Fatalf("Error reading state file %s. %s", terraformerStateFile, err.Error())
	}
	result := gjson.Parse(string(stateBytes))

	list := result.Get("modules.0.resources").Map()
	repositorySets := new(githubfoundations.RepositorySetInput)
	repositoryUserPermissions := make(map[string]map[string]string)
	for resource_id, gjsonResult := range list {
		rType := functions.IdentifyFoundationsResourceType(resource_id)
		rAttributes := gjsonResult.Get("primary.attributes")
		if rType == githubfoundations.Repository {
			repository := functions.MapTerraformerRepositoryToGithubFoundationRepository(rAttributes)
			visibility := rAttributes.Get("visibility").String()
			if visibility == "public" {
				repositorySets.PublicRepositories = append(repositorySets.PublicRepositories, repository)
			} else {
				repositorySets.PrivateRepositories = append(repositorySets.PrivateRepositories, repository)
			}
		} else if rType == githubfoundations.RepositoryCollaborator {
			repositoryName := rAttributes.Get("repository").String()
			permission := rAttributes.Get("permission").String()
			username := rAttributes.Get("username").String()
			userPermission, ok := repositoryUserPermissions[repositoryName]
			if !ok {
				userPermission = make(map[string]string)
			}
			userPermission[username] = permission
			repositoryUserPermissions[repositoryName] = userPermission
		}
	}

	for _, repository := range repositorySets.PrivateRepositories {
		repository.UserPermissions = repositoryUserPermissions[repository.Name]
	}
	for _, repository := range repositorySets.PublicRepositories {
		repository.UserPermissions = repositoryUserPermissions[repository.Name]
	}

	return repositorySets
}
